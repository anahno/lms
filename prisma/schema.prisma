// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- مدل‌های استاندارد Next-Auth ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- تعریف Enum ها برای کل برنامه ---

enum Role {
  USER
  INSTRUCTOR
  ADMIN
}

enum CourseStatus {
  DRAFT
  PENDING
  PUBLISHED
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  FILL_IN_THE_BLANK
  ESSAY
  AUDIO_RESPONSE
}

enum SubmissionStatus {
  IN_PROGRESS
  SUBMITTED
  GRADED
}

// +++ Enum جدید برای وضعیت خرید +++
enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
}

// --- مدل‌های اصلی برنامه ---

model User {
  id               String      @id @default(cuid())
  name             String?
  email            String?     @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             Role        @default(USER)
  bio              String?     @db.Text
  experiencePoints Int         @default(0)
  level            Int         @default(1)
  badges           UserBadge[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  accounts      Account[]
  sessions      Session[]
  learningPaths LearningPath[]
  progress      UserProgress[]
  enrollments   Enrollment[]
  submissions   QuizSubmission[]
  discussions   Discussion[]
  purchases     Purchase[] // <--- رابطه دوطرفه با خریدها اضافه شد
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

model LearningPath {
  id               String       @id @default(cuid())
  title            String
  subtitle         String?      @db.Text
  description      String?      @db.Text
  imageUrl         String?
  whatYouWillLearn String[]     @default([])
  requirements     String[]     @default([])
  price            Float?
    // +++ شروع تغییرات +++
  discountPrice    Float?       // قیمت بعد از تخفیف (می‌تواند null باشد)
  // +++ پایان تغییرات +++
  level            CourseLevel? @default(ALL_LEVELS)

  introAudioUrl String?      @db.Text
  status        CourseStatus @default(DRAFT)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  levels      Level[]
  enrollments Enrollment[]
  quiz        Quiz?
  purchases   Purchase[] // <--- رابطه دوطرفه با خریدها اضافه شد
}

model Enrollment {
  id             String @id @default(cuid())
  userId         String
  learningPathId String

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPath LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, learningPathId])
}

model Category {
  id            String         @id @default(cuid())
  name          String         @unique
  learningPaths LearningPath[]
  parentId      String?
  parent        Category?      @relation("ParentSubcategories", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories Category[]     @relation("ParentSubcategories")
}

model Level {
  id             String       @id @default(cuid())
  title          String
  position       Int
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  chapters       Chapter[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  quiz           Quiz?
}

model Chapter {
  id          String    @id @default(cuid())
  title       String
  position    Int
  isPublished Boolean   @default(false)
  levelId     String
  level       Level     @relation(fields: [levelId], references: [id], onDelete: Cascade)
  sections    Section[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  quiz        Quiz?
}

model Section {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  videoUrl    String?        @db.Text
  audioUrl    String?        @db.Text
  duration    Int?
  position    Int
  isPublished Boolean        @default(false)
  isFree      Boolean        @default(false)
  chapterId   String
  chapter     Chapter        @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  progress    UserProgress[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  quiz        Quiz?
  discussions Discussion[]
}

model UserProgress {
  id          String  @id @default(cuid())
  userId      String
  isCompleted Boolean @default(false)
  score       Float?

  // فیلد امتیازدهی که در کد اصلی شما بود و من حفظش کردم
  rating Int?

  sectionId String
  section   Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, sectionId])
}

// --- مدل‌های جدید و انعطاف‌پذیر برای سیستم آزمون ---

model Quiz {
  id             String           @id @default(cuid())
  title          String
  learningPathId String?          @unique
  levelId        String?          @unique
  chapterId      String?          @unique
  sectionId      String?          @unique
  learningPath   LearningPath?    @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  level          Level?           @relation(fields: [levelId], references: [id], onDelete: Cascade)
  chapter        Chapter?         @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  section        Section?         @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  questions      Question[]
  submissions    QuizSubmission[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Question {
  id        String       @id @default(cuid())
  text      String       @db.Text
  position  Int
  points    Int          @default(1)
  type      QuestionType
  mediaUrl  String?
  quizId    String
  quiz      Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   Option[]
  answers   UserAnswer[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Option {
  id          String       @id @default(cuid())
  text        String
  isCorrect   Boolean      @default(false)
  questionId  String
  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model QuizSubmission {
  id        String           @id @default(cuid())
  userId    String
  quizId    String
  score     Float?
  status    SubmissionStatus @default(IN_PROGRESS)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   UserAnswer[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([userId, quizId])
}

model UserAnswer {
  id                String         @id @default(cuid())
  submissionId      String
  questionId        String
  selectedOptionId  String?
  selectedOptionIds String[]
  textAnswer        String?        @db.Text
  fileUrl           String?
  isCorrect         Boolean?
  score             Float?
  feedback          String?        @db.Text
  submission        QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question          Question       @relation(fields: [questionId], references: [id], onDelete: NoAction)
  option            Option?        @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction)

  @@unique([submissionId, questionId])
}

// +++ مدل جدید برای سیستم پرسش و پاسخ +++
model Discussion {
  id        String       @id @default(cuid())
  content   String       @db.Text
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sectionId String
  section   Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Discussion?  @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Discussion[] @relation("Replies")
}

// +++ شروع مدل‌های جدید برای گیمیفیکیشن +++
model Badge {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  imageUrl    String
  users       UserBadge[]
  createdAt   DateTime    @default(now())
}

model UserBadge {
  userId    String
  badgeId   String
  awardedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@id([userId, badgeId])
}

// +++ مدل جدید و نهایی برای مدیریت پرداخت‌ها +++
model Purchase {
  id             String         @id @default(cuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPathId String
  learningPath   LearningPath   @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  amount         Float
  status         PurchaseStatus @default(PENDING)
  authority      String?        @unique
  refId          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([userId, learningPathId])
}
