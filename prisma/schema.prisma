// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  learningPaths LearningPath[]
  progress      UserProgress[]
}

model LearningPath {
  id          String    @id @default(cuid())
  title       String
  subtitle         String?   @db.Text      // اضافه شد: زیرعنوان دوره
  description String?   @db.Text
  imageUrl    String?
  whatYouWillLearn String[]  @default([]) 
  requirements     String[]  @default([])
  isPublished Boolean   @default(false)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  levels      Level[]
}

// --- این مدل را با نسخه جدید جایگزین کنید ---
model Category {
  id            String   @id @default(cuid())
  name          String   @unique
  learningPaths LearningPath[]

  // --- شروع تغییرات کلیدی ---
  // این فیلد ID والد را نگه می‌دارد. علامت ؟ یعنی اختیاری است (دسته‌بندی‌های اصلی والد ندارند)
  parentId      String?
  // این رابطه، خود دسته‌بندی والد را تعریف می‌کند
  parent        Category?  @relation("ParentSubcategories", fields: [parentId], references: [id], onDelete: Cascade)
  
  // این رابطه، لیستی از تمام زیرمجموعه‌های این دسته‌بندی را نگه می‌دارد
  subcategories Category[] @relation("ParentSubcategories")
  // --- پایان تغییرات کلیدی ---
}

model Level {
  id             String       @id @default(cuid())
  title          String
  position       Int
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  chapters       Chapter[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Chapter {
  id          String    @id @default(cuid())
  title       String
  position    Int
  isPublished Boolean   @default(false)
  levelId     String
  level       Level     @relation(fields: [levelId], references: [id], onDelete: Cascade)
  sections    Section[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Section {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  videoUrl    String?        @db.Text
    duration        Int?           

  position    Int
  isPublished Boolean        @default(false)
  isFree      Boolean        @default(false)
  chapterId   String
  chapter     Chapter        @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  progress    UserProgress[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  isCompleted Boolean  @default(false)
  sectionId   String
  section     Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, sectionId])
}