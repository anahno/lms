// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- مدل‌های استاندارد Next-Auth (بدون تغییر) ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- تعریف Enum ها برای نقش‌ها و وضعیت دوره ---

// ۱. تعریف نقش‌های سه‌گانه: دانشجو، استاد، ادمین
enum Role {
  USER
  INSTRUCTOR
  ADMIN
}

// ۲. تعریف وضعیت‌های مختلف دوره برای مدیریت فرآیند تایید و انتشار
enum CourseStatus {
  DRAFT     // پیش‌نویس: فقط استاد و ادمین می‌بینند
  PENDING   // در انتظار تایید: استاد ارسال کرده، منتظر تایید ادمین است
  PUBLISHED // منتشر شده: برای همه در کاتالوگ قابل مشاهده است
}


// --- مدل‌های اصلی برنامه ---

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  
  // ۳. اضافه کردن فیلد نقش به کاربر (مهم: پیش‌فرض USER است)
  // این تضمین می‌کند هر کاربر جدیدی که ثبت‌نام می‌کند، دانشجو باشد.
  role          Role           @default(USER)

  accounts      Account[]
  sessions      Session[]
  learningPaths LearningPath[]
  progress      UserProgress[]
  enrollments   Enrollment[]   // رابطه جدید برای ثبت‌نام‌ها
}

model LearningPath {
  id               String       @id @default(cuid())
  title            String
  subtitle         String?      @db.Text
  description      String?      @db.Text
  imageUrl         String?
  whatYouWillLearn String[]     @default([]) 
  requirements     String[]     @default([])
  
  // ۴. جایگزینی isPublished با فیلد status جدید
  status           CourseStatus @default(DRAFT)
  
  categoryId       String?
  category         Category?    @relation(fields: [categoryId], references: [id])
  
  userId           String       // این ID مشخص می‌کند کدام استاد دوره را ساخته
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  levels           Level[]
  enrollments      Enrollment[] // رابطه جدید برای ثبت‌نام‌ها
}

// ۵. مدل جدید برای مدیریت ثبت‌نام دانشجو در دوره
model Enrollment {
  id             String       @id @default(cuid())
  userId         String
  learningPathId String

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // این خط تضمین می‌کند که یک دانشجو نمی‌تواند بیش از یک بار در یک دوره ثبت‌نام کند
  @@unique([userId, learningPathId])
}


model Category {
  id            String         @id @default(cuid())
  name          String         @unique
  learningPaths LearningPath[]
  parentId      String?
  parent        Category?      @relation("ParentSubcategories", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories Category[]     @relation("ParentSubcategories")
}

model Level {
  id             String       @id @default(cuid())
  title          String
  position       Int
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  chapters       Chapter[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Chapter {
  id          String    @id @default(cuid())
  title       String
  position    Int
  isPublished Boolean   @default(false)
  levelId     String
  level       Level     @relation(fields: [levelId], references: [id], onDelete: Cascade)
  sections    Section[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Section {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  videoUrl    String?        @db.Text
  duration    Int?           
  position    Int
  isPublished Boolean        @default(false)
  isFree      Boolean        @default(false)
  chapterId   String
  chapter     Chapter        @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  progress    UserProgress[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  isCompleted Boolean  @default(false)
  sectionId   String
  section     Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, sectionId])
}